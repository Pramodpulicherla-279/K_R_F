{"uid":"a49fa69f09df2e","name":"Test valid login with fallback OCR and AI suggestions","fullName":"tests.test_login#test_login_success","historyId":"86600b41e86dab7ca99f472fa61e4b05","time":{"start":1751974209326,"stop":1751974272381,"duration":63055},"status":"failed","statusMessage":"AssertionError: ❌ Test failed: 'dashboard_title'","statusTrace":"driver = <appium.webdriver.webdriver.WebDriver (session=\"7ec7ace0-d305-4034-b42f-db0773a325c9\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            if phone_input is not None:\n                phone_input.send_keys(\"7660852538\")\n            else:\n                # After OCR click, try to send keys using the driver\n                # This assumes the field is now focused\n                for digit in \"7660852538\":\n                    driver.press_keycode(7 + int(digit))  # Keycode 7 is '0'\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            if next_button is not None:\n                next_button.click()\n            else:\n                # If OCR fallback was used, assume the click was successful and continue\n                print(\"[INFO] Next button clicked by OCR fallback.\")\n    \n            # STEP 3: Wait for OTP to arrive before clicking Verify\n            print(\"[INFO] Waiting for OTP to arrive...\")\n            time.sleep(10)  # Adjust as needed for your OTP delivery time\n    \n            verify_button = smart_find_element(\n                driver,\n                name=\"verify_button_login\",\n                xpath=locators[\"verify_button_login\"],\n                fallback_text=\"Verify\"\n            )\n            if verify_button is not None:\n                verify_button.click()\n            else:\n                print(\"[INFO] Verify button clicked by OCR fallback.\")\n    \n            # STEP 4: Wait for dashboard or success screen (explicit wait)\n            print(\"[INFO] Waiting for dashboard screen...\")\n            dashboard = None\n            timeout = 30  # seconds\n            poll_interval = 1\n            start_time = time.time()\n            ocr_dashboard_found = False\n    \n            while time.time() - start_time < timeout:\n                dashboard = smart_find_element(\n                    driver,\n                    name=\"dashboard_title\",\n>                   xpath=locators[\"dashboard_title\"],\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                    fallback_text=\"Dashboard\"\n                )\nE               KeyError: 'dashboard_title'\n\ntests\\test_login.py:79: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"7ec7ace0-d305-4034-b42f-db0773a325c9\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            if phone_input is not None:\n                phone_input.send_keys(\"7660852538\")\n            else:\n                # After OCR click, try to send keys using the driver\n                # This assumes the field is now focused\n                for digit in \"7660852538\":\n                    driver.press_keycode(7 + int(digit))  # Keycode 7 is '0'\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            if next_button is not None:\n                next_button.click()\n            else:\n                # If OCR fallback was used, assume the click was successful and continue\n                print(\"[INFO] Next button clicked by OCR fallback.\")\n    \n            # STEP 3: Wait for OTP to arrive before clicking Verify\n            print(\"[INFO] Waiting for OTP to arrive...\")\n            time.sleep(10)  # Adjust as needed for your OTP delivery time\n    \n            verify_button = smart_find_element(\n                driver,\n                name=\"verify_button_login\",\n                xpath=locators[\"verify_button_login\"],\n                fallback_text=\"Verify\"\n            )\n            if verify_button is not None:\n                verify_button.click()\n            else:\n                print(\"[INFO] Verify button clicked by OCR fallback.\")\n    \n            # STEP 4: Wait for dashboard or success screen (explicit wait)\n            print(\"[INFO] Waiting for dashboard screen...\")\n            dashboard = None\n            timeout = 30  # seconds\n            poll_interval = 1\n            start_time = time.time()\n            ocr_dashboard_found = False\n    \n            while time.time() - start_time < timeout:\n                dashboard = smart_find_element(\n                    driver,\n                    name=\"dashboard_title\",\n                    xpath=locators[\"dashboard_title\"],\n                    fallback_text=\"Dashboard\"\n                )\n                if dashboard is not None:\n                    break\n                # OCR fallback: check if \"Dashboard\" is present in the last OCR result\n                screenshot_path = \"screenshots/dashboard_check.png\"\n                driver.save_screenshot(screenshot_path)\n                ocr_text = extract_text_with_coordinates(screenshot_path)\n                if any(\"dashboard\" in item[\"text\"].lower() for item in ocr_text):\n                    ocr_dashboard_found = True\n                    print(\"[INFO] Dashboard detected by OCR.\")\n                    break\n                time.sleep(poll_interval)\n    \n            assert dashboard is not None or ocr_dashboard_found, \"❌ Login likely failed: Dashboard not found\"\n    \n            allure.attach(\"✅ Login success\", name=\"Test Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        except Exception as e:\n            screenshot_path = \"screenshots/failed_login.png\"\n            driver.save_screenshot(screenshot_path)\n            allure.attach.file(screenshot_path, name=\"Failure Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n            # OCR text capture\n            ocr_text = extract_text_with_coordinates(screenshot_path)\n            print(\"\uD83E\uDDE0 OCR Detected Text:\\n\", ocr_text)\n    \n            # AI agent suggestion (if enabled)\n            if AI_KEY:\n                fix = ai_agent.suggest_fix(str(e), screenshot_path)\n                allure.attach(fix, name=\"AI Fix Suggestion\", attachment_type=allure.attachment_type.TEXT)\n    \n>           raise AssertionError(f\"❌ Test failed: {str(e)}\")\nE           AssertionError: ❌ Test failed: 'dashboard_title'\n\ntests\\test_login.py:112: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1751974175445,"stop":1751974209303,"duration":33858},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ Test failed: 'dashboard_title'","statusTrace":"driver = <appium.webdriver.webdriver.WebDriver (session=\"7ec7ace0-d305-4034-b42f-db0773a325c9\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            if phone_input is not None:\n                phone_input.send_keys(\"7660852538\")\n            else:\n                # After OCR click, try to send keys using the driver\n                # This assumes the field is now focused\n                for digit in \"7660852538\":\n                    driver.press_keycode(7 + int(digit))  # Keycode 7 is '0'\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            if next_button is not None:\n                next_button.click()\n            else:\n                # If OCR fallback was used, assume the click was successful and continue\n                print(\"[INFO] Next button clicked by OCR fallback.\")\n    \n            # STEP 3: Wait for OTP to arrive before clicking Verify\n            print(\"[INFO] Waiting for OTP to arrive...\")\n            time.sleep(10)  # Adjust as needed for your OTP delivery time\n    \n            verify_button = smart_find_element(\n                driver,\n                name=\"verify_button_login\",\n                xpath=locators[\"verify_button_login\"],\n                fallback_text=\"Verify\"\n            )\n            if verify_button is not None:\n                verify_button.click()\n            else:\n                print(\"[INFO] Verify button clicked by OCR fallback.\")\n    \n            # STEP 4: Wait for dashboard or success screen (explicit wait)\n            print(\"[INFO] Waiting for dashboard screen...\")\n            dashboard = None\n            timeout = 30  # seconds\n            poll_interval = 1\n            start_time = time.time()\n            ocr_dashboard_found = False\n    \n            while time.time() - start_time < timeout:\n                dashboard = smart_find_element(\n                    driver,\n                    name=\"dashboard_title\",\n>                   xpath=locators[\"dashboard_title\"],\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                    fallback_text=\"Dashboard\"\n                )\nE               KeyError: 'dashboard_title'\n\ntests\\test_login.py:79: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"7ec7ace0-d305-4034-b42f-db0773a325c9\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            if phone_input is not None:\n                phone_input.send_keys(\"7660852538\")\n            else:\n                # After OCR click, try to send keys using the driver\n                # This assumes the field is now focused\n                for digit in \"7660852538\":\n                    driver.press_keycode(7 + int(digit))  # Keycode 7 is '0'\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            if next_button is not None:\n                next_button.click()\n            else:\n                # If OCR fallback was used, assume the click was successful and continue\n                print(\"[INFO] Next button clicked by OCR fallback.\")\n    \n            # STEP 3: Wait for OTP to arrive before clicking Verify\n            print(\"[INFO] Waiting for OTP to arrive...\")\n            time.sleep(10)  # Adjust as needed for your OTP delivery time\n    \n            verify_button = smart_find_element(\n                driver,\n                name=\"verify_button_login\",\n                xpath=locators[\"verify_button_login\"],\n                fallback_text=\"Verify\"\n            )\n            if verify_button is not None:\n                verify_button.click()\n            else:\n                print(\"[INFO] Verify button clicked by OCR fallback.\")\n    \n            # STEP 4: Wait for dashboard or success screen (explicit wait)\n            print(\"[INFO] Waiting for dashboard screen...\")\n            dashboard = None\n            timeout = 30  # seconds\n            poll_interval = 1\n            start_time = time.time()\n            ocr_dashboard_found = False\n    \n            while time.time() - start_time < timeout:\n                dashboard = smart_find_element(\n                    driver,\n                    name=\"dashboard_title\",\n                    xpath=locators[\"dashboard_title\"],\n                    fallback_text=\"Dashboard\"\n                )\n                if dashboard is not None:\n                    break\n                # OCR fallback: check if \"Dashboard\" is present in the last OCR result\n                screenshot_path = \"screenshots/dashboard_check.png\"\n                driver.save_screenshot(screenshot_path)\n                ocr_text = extract_text_with_coordinates(screenshot_path)\n                if any(\"dashboard\" in item[\"text\"].lower() for item in ocr_text):\n                    ocr_dashboard_found = True\n                    print(\"[INFO] Dashboard detected by OCR.\")\n                    break\n                time.sleep(poll_interval)\n    \n            assert dashboard is not None or ocr_dashboard_found, \"❌ Login likely failed: Dashboard not found\"\n    \n            allure.attach(\"✅ Login success\", name=\"Test Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        except Exception as e:\n            screenshot_path = \"screenshots/failed_login.png\"\n            driver.save_screenshot(screenshot_path)\n            allure.attach.file(screenshot_path, name=\"Failure Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n            # OCR text capture\n            ocr_text = extract_text_with_coordinates(screenshot_path)\n            print(\"\uD83E\uDDE0 OCR Detected Text:\\n\", ocr_text)\n    \n            # AI agent suggestion (if enabled)\n            if AI_KEY:\n                fix = ai_agent.suggest_fix(str(e), screenshot_path)\n                allure.attach(fix, name=\"AI Fix Suggestion\", attachment_type=allure.attachment_type.TEXT)\n    \n>           raise AssertionError(f\"❌ Test failed: {str(e)}\")\nE           AssertionError: ❌ Test failed: 'dashboard_title'\n\ntests\\test_login.py:112: AssertionError","steps":[],"attachments":[{"uid":"c564f147e6c7c49b","name":"Failure Screenshot","source":"c564f147e6c7c49b.png","type":"image/png","size":109772},{"uid":"a3e73886de3339f3","name":"stdout","source":"a3e73886de3339f3.txt","type":"text/plain","size":709}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"driver::0","time":{"start":1751974287548,"stop":1751974288085,"duration":537},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"epic","value":"Login Flow"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"DELL"},{"name":"thread","value":"19592-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"a49fa69f09df2e.json","parameterValues":[]}