{"uid":"654c5b6d3e59306a","name":"Test valid login with fallback OCR and AI suggestions","fullName":"tests.test_login#test_login_success","historyId":"86600b41e86dab7ca99f472fa61e4b05","time":{"start":1751971102900,"stop":1751971117507,"duration":14607},"status":"failed","statusMessage":"AssertionError: ❌ Test failed: ❌ Phone number input not found\nassert None is not None","statusTrace":"driver = <appium.webdriver.webdriver.WebDriver (session=\"9d7c9974-a43c-4685-8553-36df9ea077a7\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n>           assert phone_input is not None, \"❌ Phone number input not found\"\nE           AssertionError: ❌ Phone number input not found\nE           assert None is not None\n\ntests\\test_login.py:28: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"9d7c9974-a43c-4685-8553-36df9ea077a7\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n            assert phone_input is not None, \"❌ Phone number input not found\"\n            phone_input.send_keys(\"7660852538\")\n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            assert next_button is not None, \"❌ Next button not found\"\n            next_button.click()\n    \n            # STEP 3: Wait for dashboard or success screen\n            dashboard = smart_find_element(\n                driver,\n                name=\"dashboard_title\",\n                xpath=locators[\"dashboard_title\"],\n                fallback_text=\"Dashboard\"\n            )\n            assert dashboard is not None, \"❌ Login likely failed: Dashboard not found\"\n    \n            allure.attach(\"✅ Login success\", name=\"Test Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        except Exception as e:\n            screenshot_path = \"screenshots/failed_login.png\"\n            driver.save_screenshot(screenshot_path)\n            allure.attach.file(screenshot_path, name=\"Failure Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n            # OCR text capture\n            ocr_text = extract_text_with_coordinates(screenshot_path)\n            print(\"\uD83E\uDDE0 OCR Detected Text:\\n\", ocr_text)\n    \n            # AI agent suggestion (if enabled)\n            if AI_KEY:\n                fix = ai_agent.suggest_fix(str(e), screenshot_path)\n                allure.attach(fix, name=\"AI Fix Suggestion\", attachment_type=allure.attachment_type.TEXT)\n    \n>           raise AssertionError(f\"❌ Test failed: {str(e)}\")\nE           AssertionError: ❌ Test failed: ❌ Phone number input not found\nE           assert None is not None\n\ntests\\test_login.py:66: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1751971093691,"stop":1751971102900,"duration":9209},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ Test failed: ❌ Phone number input not found\nassert None is not None","statusTrace":"driver = <appium.webdriver.webdriver.WebDriver (session=\"9d7c9974-a43c-4685-8553-36df9ea077a7\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n>           assert phone_input is not None, \"❌ Phone number input not found\"\nE           AssertionError: ❌ Phone number input not found\nE           assert None is not None\n\ntests\\test_login.py:28: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"9d7c9974-a43c-4685-8553-36df9ea077a7\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n            assert phone_input is not None, \"❌ Phone number input not found\"\n            phone_input.send_keys(\"7660852538\")\n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            assert next_button is not None, \"❌ Next button not found\"\n            next_button.click()\n    \n            # STEP 3: Wait for dashboard or success screen\n            dashboard = smart_find_element(\n                driver,\n                name=\"dashboard_title\",\n                xpath=locators[\"dashboard_title\"],\n                fallback_text=\"Dashboard\"\n            )\n            assert dashboard is not None, \"❌ Login likely failed: Dashboard not found\"\n    \n            allure.attach(\"✅ Login success\", name=\"Test Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        except Exception as e:\n            screenshot_path = \"screenshots/failed_login.png\"\n            driver.save_screenshot(screenshot_path)\n            allure.attach.file(screenshot_path, name=\"Failure Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n            # OCR text capture\n            ocr_text = extract_text_with_coordinates(screenshot_path)\n            print(\"\uD83E\uDDE0 OCR Detected Text:\\n\", ocr_text)\n    \n            # AI agent suggestion (if enabled)\n            if AI_KEY:\n                fix = ai_agent.suggest_fix(str(e), screenshot_path)\n                allure.attach(fix, name=\"AI Fix Suggestion\", attachment_type=allure.attachment_type.TEXT)\n    \n>           raise AssertionError(f\"❌ Test failed: {str(e)}\")\nE           AssertionError: ❌ Test failed: ❌ Phone number input not found\nE           assert None is not None\n\ntests\\test_login.py:66: AssertionError","steps":[],"attachments":[{"uid":"8567233ed9b523b","name":"Failure Screenshot","source":"8567233ed9b523b.png","type":"image/png","size":536753},{"uid":"a1b4c1a681b75946","name":"stdout","source":"a1b4c1a681b75946.txt","type":"text/plain","size":1316}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"driver::0","time":{"start":1751971120316,"stop":1751971120660,"duration":344},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"epic","value":"Login Flow"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"DELL"},{"name":"thread","value":"22716-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"654c5b6d3e59306a.json","parameterValues":[]}