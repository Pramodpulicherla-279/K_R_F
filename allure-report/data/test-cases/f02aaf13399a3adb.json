{"uid":"f02aaf13399a3adb","name":"Test valid login","fullName":"tests.test_login#test_login_success","historyId":"86600b41e86dab7ca99f472fa61e4b05","time":{"start":1751969078432,"stop":1751969078432,"duration":0},"status":"failed","statusMessage":"Failed: Failed to initialize Appium driver: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Activity name '.com.krishivaas.app.MainActivity' used to start the app doesn't exist or cannot be launched! Make sure it exists and is a launchable activity\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Activity name '.com.krishivaas.app.MainActivity' used to start the app doesn't exist or cannot be launched! Make sure it exists and is a launchable activity\n    at getResponseForW3CError (C:\\Users\\Pramo\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.js:1143:9)\n    at asyncHandler (C:\\Users\\Pramo\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.js:487:57)","statusTrace":"@pytest.fixture(scope=\"session\")\n    def driver():\n        # Configure capabilities\n        options = UiAutomator2Options()\n    \n        # Required capabilities\n        options.platform_name = \"Android\"\n        options.automation_name = \"uiautomator2\"  # Explicitly set automation engine\n    \n        # Device capabilities - adjust these to match your device\n        options.device_name = \"emulator-5554\"  # Use actual device name from 'adb devices'\n        options.udid = os.getenv(\"ANDROID_DEVICE_UDID\", None)  # Optional but recommended\n    \n        # App capabilities\n        options.app = APK_PATH  # Make sure this path is correct\n        options.app_package = \"com.krishivaas\"\n        options.app_activity = \"com.krishivaas.app.MainActivity\"\n    \n        # Optional settings\n        options.no_reset = True\n        options.auto_grant_permissions = True\n    \n        try:\n            # Initialize driver with error handling\n>           driver = webdriver.Remote(\n                \"http://localhost:4723\",  # Try without /wd/hub for newer Appium versions\n                options=options\n            )\n\nconftest.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:238: in __init__\n    super().__init__(\nC:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:261: in __init__\n    self.start_session(capabilities)\nC:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\appium\\webdriver\\webdriver.py:329: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000224034EAC60>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...\\npm\\\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\@appium\\\\\\\\base-driver\\\\\\\\lib\\\\\\\\protocol\\\\\\\\protocol.js:487:57)\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Activity name '.com.krishivaas.app.MainActivity' used to start the app doesn't exist or cannot be launched! Make sure it exists and is a launchable activity\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Activity name '.com.krishivaas.app.MainActivity' used to start the app doesn't exist or cannot be launched! Make sure it exists and is a launchable activity\nE           at getResponseForW3CError (C:\\Users\\Pramo\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.js:1143:9)\nE           at asyncHandler (C:\\Users\\Pramo\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.js:487:57)\n\nC:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope=\"session\")\n    def driver():\n        # Configure capabilities\n        options = UiAutomator2Options()\n    \n        # Required capabilities\n        options.platform_name = \"Android\"\n        options.automation_name = \"uiautomator2\"  # Explicitly set automation engine\n    \n        # Device capabilities - adjust these to match your device\n        options.device_name = \"emulator-5554\"  # Use actual device name from 'adb devices'\n        options.udid = os.getenv(\"ANDROID_DEVICE_UDID\", None)  # Optional but recommended\n    \n        # App capabilities\n        options.app = APK_PATH  # Make sure this path is correct\n        options.app_package = \"com.krishivaas\"\n        options.app_activity = \"com.krishivaas.app.MainActivity\"\n    \n        # Optional settings\n        options.no_reset = True\n        options.auto_grant_permissions = True\n    \n        try:\n            # Initialize driver with error handling\n            driver = webdriver.Remote(\n                \"http://localhost:4723\",  # Try without /wd/hub for newer Appium versions\n                options=options\n            )\n            yield driver\n        except WebDriverException as e:\n>           pytest.fail(f\"Failed to initialize Appium driver: {str(e)}\")\nE           Failed: Failed to initialize Appium driver: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Activity name '.com.krishivaas.app.MainActivity' used to start the app doesn't exist or cannot be launched! Make sure it exists and is a launchable activity\nE           Stacktrace:\nE           UnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Activity name '.com.krishivaas.app.MainActivity' used to start the app doesn't exist or cannot be launched! Make sure it exists and is a launchable activity\nE               at getResponseForW3CError (C:\\Users\\Pramo\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.js:1143:9)\nE               at asyncHandler (C:\\Users\\Pramo\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.js:487:57)\n\nconftest.py:39: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1751969078432,"stop":1751969087139,"duration":8707},"status":"failed","statusMessage":"Failed: Failed to initialize Appium driver: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Activity name '.com.krishivaas.app.MainActivity' used to start the app doesn't exist or cannot be launched! Make sure it exists and is a launchable activity\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Cannot start the 'com.krishivaas' application. Consider checking the driver's troubleshooting documentation. Original error: Activity name '.com.krishivaas.app.MainActivity' used to start the app doesn't exist or cannot be launched! Make sure it exists and is a launchable activity\n    at getResponseForW3CError (C:\\Users\\Pramo\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\errors.js:1143:9)\n    at asyncHandler (C:\\Users\\Pramo\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\protocol\\protocol.js:487:57)\n","statusTrace":"  File \"C:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pluggy\\_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"C:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"C:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\pluggy\\_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1195, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py\", line 922, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"F:\\K_R_F\\conftest.py\", line 39, in driver\n    pytest.fail(f\"Failed to initialize Appium driver: {str(e)}\")\n  File \"C:\\Users\\Pramo\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\_pytest\\outcomes.py\", line 177, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"afterStages":[],"labels":[{"name":"epic","value":"Login Flow"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"DELL"},{"name":"thread","value":"21788-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f02aaf13399a3adb.json","parameterValues":[]}