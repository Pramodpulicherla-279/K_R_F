{"uid":"9ed649d1c4378c5d","name":"Test valid login with fallback OCR and AI suggestions","fullName":"tests.test_login#test_login_success","historyId":"86600b41e86dab7ca99f472fa61e4b05","time":{"start":1751971771336,"stop":1751971785571,"duration":14235},"status":"failed","statusMessage":"AssertionError: ❌ Test failed: ❌ Phone number input not found\nassert None is not None","statusTrace":"driver = <appium.webdriver.webdriver.WebDriver (session=\"be329cdd-f94c-4625-983b-5389b7047f3f\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # Find the phone number input field with multiple locator strategies\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            # Verify element was found\n>           assert phone_input is not None, \"❌ Phone number input not found\"\nE           AssertionError: ❌ Phone number input not found\nE           assert None is not None\n\ntests\\test_login.py:30: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"be329cdd-f94c-4625-983b-5389b7047f3f\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # Find the phone number input field with multiple locator strategies\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            # Verify element was found\n            assert phone_input is not None, \"❌ Phone number input not found\"\n    \n            # Clear the field first in case there's existing text\n            phone_input.clear()\n    \n            # Enter the phone number with verification\n            phone_number = \"7660852538\"\n            phone_input.send_keys(phone_number)\n    \n            # Verify the text was entered correctly\n            entered_text = phone_input.text\n            assert entered_text == phone_number, f\"❌ Phone number not entered correctly. Expected: {phone_number}, Got: {entered_text}\"\n    \n            # print(\"✅ Phone number entered successfully\")\n    \n        # except Exception as e:\n        #     print(f\"❌ Error entering phone number: {str(e)}\")\n        #     raise\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            assert next_button is not None, \"❌ Next button not found\"\n            next_button.click()\n    \n            # STEP 3: Wait for dashboard or success screen\n            dashboard = smart_find_element(\n                driver,\n                name=\"dashboard_title\",\n                xpath=locators[\"dashboard_title\"],\n                fallback_text=\"Dashboard\"\n            )\n            assert dashboard is not None, \"❌ Login likely failed: Dashboard not found\"\n    \n            allure.attach(\"✅ Login success\", name=\"Test Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        except Exception as e:\n            screenshot_path = \"screenshots/failed_login.png\"\n            driver.save_screenshot(screenshot_path)\n            allure.attach.file(screenshot_path, name=\"Failure Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n            # OCR text capture\n            ocr_text = extract_text_with_coordinates(screenshot_path)\n            print(\"\uD83E\uDDE0 OCR Detected Text:\\n\", ocr_text)\n    \n            # AI agent suggestion (if enabled)\n            if AI_KEY:\n                fix = ai_agent.suggest_fix(str(e), screenshot_path)\n                allure.attach(fix, name=\"AI Fix Suggestion\", attachment_type=allure.attachment_type.TEXT)\n    \n>           raise AssertionError(f\"❌ Test failed: {str(e)}\")\nE           AssertionError: ❌ Test failed: ❌ Phone number input not found\nE           assert None is not None\n\ntests\\test_login.py:85: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1751971761342,"stop":1751971771336,"duration":9994},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ Test failed: ❌ Phone number input not found\nassert None is not None","statusTrace":"driver = <appium.webdriver.webdriver.WebDriver (session=\"be329cdd-f94c-4625-983b-5389b7047f3f\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # Find the phone number input field with multiple locator strategies\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            # Verify element was found\n>           assert phone_input is not None, \"❌ Phone number input not found\"\nE           AssertionError: ❌ Phone number input not found\nE           assert None is not None\n\ntests\\test_login.py:30: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"be329cdd-f94c-4625-983b-5389b7047f3f\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # Find the phone number input field with multiple locator strategies\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            # Verify element was found\n            assert phone_input is not None, \"❌ Phone number input not found\"\n    \n            # Clear the field first in case there's existing text\n            phone_input.clear()\n    \n            # Enter the phone number with verification\n            phone_number = \"7660852538\"\n            phone_input.send_keys(phone_number)\n    \n            # Verify the text was entered correctly\n            entered_text = phone_input.text\n            assert entered_text == phone_number, f\"❌ Phone number not entered correctly. Expected: {phone_number}, Got: {entered_text}\"\n    \n            # print(\"✅ Phone number entered successfully\")\n    \n        # except Exception as e:\n        #     print(f\"❌ Error entering phone number: {str(e)}\")\n        #     raise\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            assert next_button is not None, \"❌ Next button not found\"\n            next_button.click()\n    \n            # STEP 3: Wait for dashboard or success screen\n            dashboard = smart_find_element(\n                driver,\n                name=\"dashboard_title\",\n                xpath=locators[\"dashboard_title\"],\n                fallback_text=\"Dashboard\"\n            )\n            assert dashboard is not None, \"❌ Login likely failed: Dashboard not found\"\n    \n            allure.attach(\"✅ Login success\", name=\"Test Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        except Exception as e:\n            screenshot_path = \"screenshots/failed_login.png\"\n            driver.save_screenshot(screenshot_path)\n            allure.attach.file(screenshot_path, name=\"Failure Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n            # OCR text capture\n            ocr_text = extract_text_with_coordinates(screenshot_path)\n            print(\"\uD83E\uDDE0 OCR Detected Text:\\n\", ocr_text)\n    \n            # AI agent suggestion (if enabled)\n            if AI_KEY:\n                fix = ai_agent.suggest_fix(str(e), screenshot_path)\n                allure.attach(fix, name=\"AI Fix Suggestion\", attachment_type=allure.attachment_type.TEXT)\n    \n>           raise AssertionError(f\"❌ Test failed: {str(e)}\")\nE           AssertionError: ❌ Test failed: ❌ Phone number input not found\nE           assert None is not None\n\ntests\\test_login.py:85: AssertionError","steps":[],"attachments":[{"uid":"3b958ff7dfe3cfc9","name":"Failure Screenshot","source":"3b958ff7dfe3cfc9.png","type":"image/png","size":535450},{"uid":"cb08da0095fb1281","name":"stdout","source":"cb08da0095fb1281.txt","type":"text/plain","size":1314}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"driver::0","time":{"start":1751971788769,"stop":1751971789332,"duration":563},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"epic","value":"Login Flow"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"DELL"},{"name":"thread","value":"7332-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"9ed649d1c4378c5d.json","parameterValues":[]}