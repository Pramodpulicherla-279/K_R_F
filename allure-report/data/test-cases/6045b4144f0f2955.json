{"uid":"6045b4144f0f2955","name":"Test valid login with fallback OCR and AI suggestions","fullName":"tests.test_login#test_login_success","historyId":"86600b41e86dab7ca99f472fa61e4b05","time":{"start":1751971515210,"stop":1751971549652,"duration":34442},"status":"failed","statusMessage":"AssertionError: ❌ Test failed: ❌ Next button not found\nassert None is not None","statusTrace":"driver = <appium.webdriver.webdriver.WebDriver (session=\"f805812c-4f3d-4728-86fb-029c341388bf\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            if phone_input:\n                phone_input.send_keys(\"7660852538\")\n            else:\n                # Fallback: try clicking the OCR-located field, then type via keyboard\n                driver.press_keycode(12)  # This is keycode for '1', just to wake keyboard\n                for digit in \"7660852538\":\n                    driver.press_keycode(int(digit) + 7)  # Keycode 7 = '0', 8 = '1', etc.\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n>           assert next_button is not None, \"❌ Next button not found\"\nE           AssertionError: ❌ Next button not found\nE           assert None is not None\n\ntests\\test_login.py:45: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"f805812c-4f3d-4728-86fb-029c341388bf\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            if phone_input:\n                phone_input.send_keys(\"7660852538\")\n            else:\n                # Fallback: try clicking the OCR-located field, then type via keyboard\n                driver.press_keycode(12)  # This is keycode for '1', just to wake keyboard\n                for digit in \"7660852538\":\n                    driver.press_keycode(int(digit) + 7)  # Keycode 7 = '0', 8 = '1', etc.\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            assert next_button is not None, \"❌ Next button not found\"\n            next_button.click()\n    \n            # STEP 3: Wait for dashboard or success screen\n            dashboard = smart_find_element(\n                driver,\n                name=\"dashboard_title\",\n                xpath=locators[\"dashboard_title\"],\n                fallback_text=\"Dashboard\"\n            )\n            assert dashboard is not None, \"❌ Login likely failed: Dashboard not found\"\n    \n            allure.attach(\"✅ Login success\", name=\"Test Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        except Exception as e:\n            screenshot_path = \"screenshots/failed_login.png\"\n            driver.save_screenshot(screenshot_path)\n            allure.attach.file(screenshot_path, name=\"Failure Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n            # OCR text capture\n            ocr_text = extract_text_with_coordinates(screenshot_path)\n            print(\"\uD83E\uDDE0 OCR Detected Text:\\n\", ocr_text)\n    \n            # AI agent suggestion (if enabled)\n            if AI_KEY:\n                fix = ai_agent.suggest_fix(str(e), screenshot_path)\n                allure.attach(fix, name=\"AI Fix Suggestion\", attachment_type=allure.attachment_type.TEXT)\n    \n>           raise AssertionError(f\"❌ Test failed: {str(e)}\")\nE           AssertionError: ❌ Test failed: ❌ Next button not found\nE           assert None is not None\n\ntests\\test_login.py:73: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1751971506573,"stop":1751971515210,"duration":8637},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: ❌ Test failed: ❌ Next button not found\nassert None is not None","statusTrace":"driver = <appium.webdriver.webdriver.WebDriver (session=\"f805812c-4f3d-4728-86fb-029c341388bf\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            if phone_input:\n                phone_input.send_keys(\"7660852538\")\n            else:\n                # Fallback: try clicking the OCR-located field, then type via keyboard\n                driver.press_keycode(12)  # This is keycode for '1', just to wake keyboard\n                for digit in \"7660852538\":\n                    driver.press_keycode(int(digit) + 7)  # Keycode 7 = '0', 8 = '1', etc.\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n>           assert next_button is not None, \"❌ Next button not found\"\nE           AssertionError: ❌ Next button not found\nE           assert None is not None\n\ntests\\test_login.py:45: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"f805812c-4f3d-4728-86fb-029c341388bf\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            if phone_input:\n                phone_input.send_keys(\"7660852538\")\n            else:\n                # Fallback: try clicking the OCR-located field, then type via keyboard\n                driver.press_keycode(12)  # This is keycode for '1', just to wake keyboard\n                for digit in \"7660852538\":\n                    driver.press_keycode(int(digit) + 7)  # Keycode 7 = '0', 8 = '1', etc.\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            assert next_button is not None, \"❌ Next button not found\"\n            next_button.click()\n    \n            # STEP 3: Wait for dashboard or success screen\n            dashboard = smart_find_element(\n                driver,\n                name=\"dashboard_title\",\n                xpath=locators[\"dashboard_title\"],\n                fallback_text=\"Dashboard\"\n            )\n            assert dashboard is not None, \"❌ Login likely failed: Dashboard not found\"\n    \n            allure.attach(\"✅ Login success\", name=\"Test Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        except Exception as e:\n            screenshot_path = \"screenshots/failed_login.png\"\n            driver.save_screenshot(screenshot_path)\n            allure.attach.file(screenshot_path, name=\"Failure Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n            # OCR text capture\n            ocr_text = extract_text_with_coordinates(screenshot_path)\n            print(\"\uD83E\uDDE0 OCR Detected Text:\\n\", ocr_text)\n    \n            # AI agent suggestion (if enabled)\n            if AI_KEY:\n                fix = ai_agent.suggest_fix(str(e), screenshot_path)\n                allure.attach(fix, name=\"AI Fix Suggestion\", attachment_type=allure.attachment_type.TEXT)\n    \n>           raise AssertionError(f\"❌ Test failed: {str(e)}\")\nE           AssertionError: ❌ Test failed: ❌ Next button not found\nE           assert None is not None\n\ntests\\test_login.py:73: AssertionError","steps":[],"attachments":[{"uid":"233dbf88417e00b5","name":"Failure Screenshot","source":"233dbf88417e00b5.png","type":"image/png","size":946082},{"uid":"edf636c6913547de","name":"stdout","source":"edf636c6913547de.txt","type":"text/plain","size":1431}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true,"attachmentStep":false,"stepsCount":0},"afterStages":[{"name":"driver::0","time":{"start":1751971552810,"stop":1751971553212,"duration":402},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"epic","value":"Login Flow"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"host","value":"DELL"},{"name":"thread","value":"20296-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"6045b4144f0f2955.json","parameterValues":[]}