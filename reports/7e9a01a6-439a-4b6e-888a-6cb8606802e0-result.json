{"name": "Test valid login with fallback OCR and AI suggestions", "status": "failed", "statusDetails": {"message": "AssertionError: ‚ùå Test failed: 'dashboard_title'", "trace": "driver = <appium.webdriver.webdriver.WebDriver (session=\"052a85db-f1dd-4a35-a069-119fa95a1f8d\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            if phone_input is not None:\n                phone_input.send_keys(\"7660852538\")\n            else:\n                # After OCR click, try to send keys using the driver\n                # This assumes the field is now focused\n                for digit in \"7660852538\":\n                    driver.press_keycode(7 + int(digit))  # Keycode 7 is '0'\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            if next_button is not None:\n                next_button.click()\n            else:\n                # If OCR fallback was used, assume the click was successful and continue\n                print(\"[INFO] Next button clicked by OCR fallback.\")\n    \n            # STEP 3: Wait for OTP to arrive before clicking Verify\n            print(\"[INFO] Waiting for OTP to arrive...\")\n            time.sleep(10)  # Adjust as needed for your OTP delivery time\n    \n            verify_button = smart_find_element(\n                driver,\n                name=\"verify_button_login\",\n                xpath=locators[\"verify_button_login\"],\n                fallback_text=\"Verify\"\n            )\n            if verify_button is not None:\n                verify_button.click()\n            else:\n                print(\"[INFO] Verify button clicked by OCR fallback.\")\n    \n            # STEP 4: Wait for dashboard or success screen (explicit wait)\n            print(\"[INFO] Waiting for dashboard screen...\")\n            dashboard = None\n            timeout = 30  # seconds\n            poll_interval = 1\n            start_time = time.time()\n            while time.time() - start_time < timeout:\n                dashboard = smart_find_element(\n                    driver,\n                    name=\"dashboard_title\",\n>                   xpath=locators[\"dashboard_title\"],\n                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n                    fallback_text=\"Dashboard\"\n                )\nE               KeyError: 'dashboard_title'\n\ntests\\test_login.py:77: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"052a85db-f1dd-4a35-a069-119fa95a1f8d\")>\n\n    @allure.epic(\"Login Flow\")\n    @allure.title(\"Test valid login with fallback OCR and AI suggestions\")\n    def test_login_success(driver):\n        try:\n            # STEP 1: Enter phone number\n            phone_input = smart_find_element(\n                driver,\n                name=\"phone_number_input\",\n                xpath=locators[\"phone_number_input\"],\n                fallback_text=\"Phone\"\n            )\n    \n            if phone_input is not None:\n                phone_input.send_keys(\"7660852538\")\n            else:\n                # After OCR click, try to send keys using the driver\n                # This assumes the field is now focused\n                for digit in \"7660852538\":\n                    driver.press_keycode(7 + int(digit))  # Keycode 7 is '0'\n    \n    \n            # STEP 2: Tap next button\n            next_button = smart_find_element(\n                driver,\n                name=\"next_button_login\",\n                xpath=locators[\"next_button_login\"],\n                fallback_text=\"Next\"\n            )\n            if next_button is not None:\n                next_button.click()\n            else:\n                # If OCR fallback was used, assume the click was successful and continue\n                print(\"[INFO] Next button clicked by OCR fallback.\")\n    \n            # STEP 3: Wait for OTP to arrive before clicking Verify\n            print(\"[INFO] Waiting for OTP to arrive...\")\n            time.sleep(10)  # Adjust as needed for your OTP delivery time\n    \n            verify_button = smart_find_element(\n                driver,\n                name=\"verify_button_login\",\n                xpath=locators[\"verify_button_login\"],\n                fallback_text=\"Verify\"\n            )\n            if verify_button is not None:\n                verify_button.click()\n            else:\n                print(\"[INFO] Verify button clicked by OCR fallback.\")\n    \n            # STEP 4: Wait for dashboard or success screen (explicit wait)\n            print(\"[INFO] Waiting for dashboard screen...\")\n            dashboard = None\n            timeout = 30  # seconds\n            poll_interval = 1\n            start_time = time.time()\n            while time.time() - start_time < timeout:\n                dashboard = smart_find_element(\n                    driver,\n                    name=\"dashboard_title\",\n                    xpath=locators[\"dashboard_title\"],\n                    fallback_text=\"Dashboard\"\n                )\n                if dashboard is not None:\n                    break\n                time.sleep(poll_interval)\n            assert dashboard is not None, \"‚ùå Login likely failed: Dashboard not found\"\n    \n            allure.attach(\"‚úÖ Login success\", name=\"Test Result\", attachment_type=allure.attachment_type.TEXT)\n    \n        except Exception as e:\n            screenshot_path = \"screenshots/failed_login.png\"\n            driver.save_screenshot(screenshot_path)\n            allure.attach.file(screenshot_path, name=\"Failure Screenshot\", attachment_type=allure.attachment_type.PNG)\n    \n            # OCR text capture\n            ocr_text = extract_text_with_coordinates(screenshot_path)\n            print(\"üß† OCR Detected Text:\\n\", ocr_text)\n    \n            # AI agent suggestion (if enabled)\n            if AI_KEY:\n                fix = ai_agent.suggest_fix(str(e), screenshot_path)\n                allure.attach(fix, name=\"AI Fix Suggestion\", attachment_type=allure.attachment_type.TEXT)\n    \n>           raise AssertionError(f\"‚ùå Test failed: {str(e)}\")\nE           AssertionError: ‚ùå Test failed: 'dashboard_title'\n\ntests\\test_login.py:101: AssertionError"}, "attachments": [{"name": "Failure Screenshot", "source": "21e9b1ab-a72f-4a8a-8bf2-50f70f30cabe-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "25135b1d-0a52-48e3-afa1-84bb4df327ca-attachment.txt", "type": "text/plain"}], "start": 1751973384093, "stop": 1751973432912, "uuid": "1601d64f-78ec-49c8-b5bd-272147d30266", "historyId": "86600b41e86dab7ca99f472fa61e4b05", "testCaseId": "86600b41e86dab7ca99f472fa61e4b05", "fullName": "tests.test_login#test_login_success", "labels": [{"name": "epic", "value": "Login Flow"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "DELL"}, {"name": "thread", "value": "14868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}